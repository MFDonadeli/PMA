// GetImageDataDlg.cpp : implementation file
//

#include "stdafx.h"
#ifdef _WIN32_WCE

#include "OpticonCameraDriver.h"
#include "..\includes\OpticonCameraService.h"
#include <winioctl.h>
#ifdef _DEBUG
#define new DEBUG_NEW
#endif

#define MAX_LINE_SIZE	1280
#define MAX_IMG_HEIGHT	1024
#define BMP_HEADER_SIZE1  0x3E
#define BMP_HEADER_SIZE4  0X76
#define BMP_HEADER_SIZE8  0x436
#define TIFF_HEADER_SIZE  0xCF

unsigned char ImgBuffer[(MAX_IMG_HEIGHT+12) * (MAX_LINE_SIZE+1)];
byte tiff_gray_data_work[TIFF_HEADER_SIZE];
byte bmp_gray_data_work[BMP_HEADER_SIZE8];

int size_1Hb,size_1HB,cnt_h,cnt_v,last_v;

const byte bmp_data1[]={
0x42,0x4D,0x3E,0x96,0x00,0x00,0x00,0x00,0x00,0x00,0x3E,0x00,0x00,0x00,0x28,0x00,
0x00,0x00,0x80,0x02,0x00,0x00,0xE0,0x01,0x00,0x00,0x01,0x00,0x01,0x00,0x00,0x00,
0x00,0x00,0x00,0x96,0x00,0x00,0xC4,0x0E,0x00,0x00,0xC4,0x0E,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0x00
};

const byte bmp_data4[]={
0x42,0x4D,             /* BMP ID */
0xF6,0x25,0x00,0x00,   /* ???????[byte] */
0x00,0x00,             /* 予約領域1[byte](未0) */
0x00,0x00,             /* 予約領域2[byte](未0) */
0x76,0x00,0x00,0x00,   /* ??????[byte] */
0x28,0x00,0x00,0x00,   /* 情報???[byte](40) */
0xA0,0x02,0x00,0x00,   /* ?像Ｘ???[dot](例640) */
0x78,0x01,0x00,0x00,   /* ?像Ｙ???[dot](例400) */
0x01,0x00,             /* 面?(1) */
0x04,0x00,             /* 色????[bit/dot](例24)*/
0x00,0x00,0x00,0x00,   /* ?縮方式(未0) */
0x00,0x00,0x00,0x00,   /* ?縮???[byte](未0) */
0x00,0x00,0x00,0x00,   /* 水平解像度[dot/m](未0) */
0x00,0x00,0x00,0x00,   /* 垂直解像度[dot/m]未(0) */
0x00,0x00,0x00,0x00,   /* 色?(例0) */
0x00,0x00,0x00,0x00,   /* 重要色?(未0) */
0x00,0x00,0x00,0x00,
0x11,0x11,0x11,0x00,
0x22,0x22,0x22,0x00,
0x33,0x33,0x33,0x00,
0x44,0x44,0x44,0x00,
0x55,0x55,0x55,0x00,
0x66,0x66,0x66,0x00,
0x77,0x77,0x77,0x00,
0x88,0x88,0x88,0x00,
0x99,0x99,0x99,0x00,
0xAA,0xAA,0xAA,0x00,
0xBB,0xBB,0xBB,0x00,
0xCC,0xCC,0xCC,0x00,
0xDD,0xDD,0xDD,0x00,
0xEE,0xEE,0xEE,0x00,
0xFF,0xFF,0xFF,0x00,
};

const byte bmp_data8[]={
0x42,0x4D,0x36,0x04,0x14,0x00,0x00,0x00,0x00,0x00,0x36,0x04,0x00,0x00,0x28,0x00,
0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x04,0x00,0x00,0x01,0x00,0x08,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x14,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x00,0x02,0x02,
0x02,0x00,0x03,0x03,0x03,0x00,0x04,0x04,0x04,0x00,0x05,0x05,0x05,0x00,0x06,0x06,
0x06,0x00,0x07,0x07,0x07,0x00,0x08,0x08,0x08,0x00,0x09,0x09,0x09,0x00,0x0A,0x0A,
0x0A,0x00,0x0B,0x0B,0x0B,0x00,0x0C,0x0C,0x0C,0x00,0x0D,0x0D,0x0D,0x00,0x0E,0x0E,
0x0E,0x00,0x0F,0x0F,0x0F,0x00,0x10,0x10,0x10,0x00,0x11,0x11,0x11,0x00,0x12,0x12,
0x12,0x00,0x13,0x13,0x13,0x00,0x14,0x14,0x14,0x00,0x15,0x15,0x15,0x00,0x16,0x16,
0x16,0x00,0x17,0x17,0x17,0x00,0x18,0x18,0x18,0x00,0x19,0x19,0x19,0x00,0x1A,0x1A,
0x1A,0x00,0x1B,0x1B,0x1B,0x00,0x1C,0x1C,0x1C,0x00,0x1D,0x1D,0x1D,0x00,0x1E,0x1E,
0x1E,0x00,0x1F,0x1F,0x1F,0x00,0x20,0x20,0x20,0x00,0x21,0x21,0x21,0x00,0x22,0x22,
0x22,0x00,0x23,0x23,0x23,0x00,0x24,0x24,0x24,0x00,0x25,0x25,0x25,0x00,0x26,0x26,
0x26,0x00,0x27,0x27,0x27,0x00,0x28,0x28,0x28,0x00,0x29,0x29,0x29,0x00,0x2A,0x2A,
0x2A,0x00,0x2B,0x2B,0x2B,0x00,0x2C,0x2C,0x2C,0x00,0x2D,0x2D,0x2D,0x00,0x2E,0x2E,
0x2E,0x00,0x2F,0x2F,0x2F,0x00,0x30,0x30,0x30,0x00,0x31,0x31,0x31,0x00,0x32,0x32,
0x32,0x00,0x33,0x33,0x33,0x00,0x34,0x34,0x34,0x00,0x35,0x35,0x35,0x00,0x36,0x36,
0x36,0x00,0x37,0x37,0x37,0x00,0x38,0x38,0x38,0x00,0x39,0x39,0x39,0x00,0x3A,0x3A,
0x3A,0x00,0x3B,0x3B,0x3B,0x00,0x3C,0x3C,0x3C,0x00,0x3D,0x3D,0x3D,0x00,0x3E,0x3E,
0x3E,0x00,0x3F,0x3F,0x3F,0x00,0x40,0x40,0x40,0x00,0x41,0x41,0x41,0x00,0x42,0x42,
0x42,0x00,0x43,0x43,0x43,0x00,0x44,0x44,0x44,0x00,0x45,0x45,0x45,0x00,0x46,0x46,
0x46,0x00,0x47,0x47,0x47,0x00,0x48,0x48,0x48,0x00,0x49,0x49,0x49,0x00,0x4A,0x4A,
0x4A,0x00,0x4B,0x4B,0x4B,0x00,0x4C,0x4C,0x4C,0x00,0x4D,0x4D,0x4D,0x00,0x4E,0x4E,
0x4E,0x00,0x4F,0x4F,0x4F,0x00,0x50,0x50,0x50,0x00,0x51,0x51,0x51,0x00,0x52,0x52,
0x52,0x00,0x53,0x53,0x53,0x00,0x54,0x54,0x54,0x00,0x55,0x55,0x55,0x00,0x56,0x56,
0x56,0x00,0x57,0x57,0x57,0x00,0x58,0x58,0x58,0x00,0x59,0x59,0x59,0x00,0x5A,0x5A,
0x5A,0x00,0x5B,0x5B,0x5B,0x00,0x5C,0x5C,0x5C,0x00,0x5D,0x5D,0x5D,0x00,0x5E,0x5E,
0x5E,0x00,0x5F,0x5F,0x5F,0x00,0x60,0x60,0x60,0x00,0x61,0x61,0x61,0x00,0x62,0x62,
0x62,0x00,0x63,0x63,0x63,0x00,0x64,0x64,0x64,0x00,0x65,0x65,0x65,0x00,0x66,0x66,
0x66,0x00,0x67,0x67,0x67,0x00,0x68,0x68,0x68,0x00,0x69,0x69,0x69,0x00,0x6A,0x6A,
0x6A,0x00,0x6B,0x6B,0x6B,0x00,0x6C,0x6C,0x6C,0x00,0x6D,0x6D,0x6D,0x00,0x6E,0x6E,
0x6E,0x00,0x6F,0x6F,0x6F,0x00,0x70,0x70,0x70,0x00,0x71,0x71,0x71,0x00,0x72,0x72,
0x72,0x00,0x73,0x73,0x73,0x00,0x74,0x74,0x74,0x00,0x75,0x75,0x75,0x00,0x76,0x76,
0x76,0x00,0x77,0x77,0x77,0x00,0x78,0x78,0x78,0x00,0x79,0x79,0x79,0x00,0x7A,0x7A,
0x7A,0x00,0x7B,0x7B,0x7B,0x00,0x7C,0x7C,0x7C,0x00,0x7D,0x7D,0x7D,0x00,0x7E,0x7E,
0x7E,0x00,0x7F,0x7F,0x7F,0x00,0x80,0x80,0x80,0x00,0x81,0x81,0x81,0x00,0x82,0x82,
0x82,0x00,0x83,0x83,0x83,0x00,0x84,0x84,0x84,0x00,0x85,0x85,0x85,0x00,0x86,0x86,
0x86,0x00,0x87,0x87,0x87,0x00,0x88,0x88,0x88,0x00,0x89,0x89,0x89,0x00,0x8A,0x8A,
0x8A,0x00,0x8B,0x8B,0x8B,0x00,0x8C,0x8C,0x8C,0x00,0x8D,0x8D,0x8D,0x00,0x8E,0x8E,
0x8E,0x00,0x8F,0x8F,0x8F,0x00,0x90,0x90,0x90,0x00,0x91,0x91,0x91,0x00,0x92,0x92,
0x92,0x00,0x93,0x93,0x93,0x00,0x94,0x94,0x94,0x00,0x95,0x95,0x95,0x00,0x96,0x96,
0x96,0x00,0x97,0x97,0x97,0x00,0x98,0x98,0x98,0x00,0x99,0x99,0x99,0x00,0x9A,0x9A,
0x9A,0x00,0x9B,0x9B,0x9B,0x00,0x9C,0x9C,0x9C,0x00,0x9D,0x9D,0x9D,0x00,0x9E,0x9E,
0x9E,0x00,0x9F,0x9F,0x9F,0x00,0xA0,0xA0,0xA0,0x00,0xA1,0xA1,0xA1,0x00,0xA2,0xA2,
0xA2,0x00,0xA3,0xA3,0xA3,0x00,0xA4,0xA4,0xA4,0x00,0xA5,0xA5,0xA5,0x00,0xA6,0xA6,
0xA6,0x00,0xA7,0xA7,0xA7,0x00,0xA8,0xA8,0xA8,0x00,0xA9,0xA9,0xA9,0x00,0xAA,0xAA,
0xAA,0x00,0xAB,0xAB,0xAB,0x00,0xAC,0xAC,0xAC,0x00,0xAD,0xAD,0xAD,0x00,0xAE,0xAE,
0xAE,0x00,0xAF,0xAF,0xAF,0x00,0xB0,0xB0,0xB0,0x00,0xB1,0xB1,0xB1,0x00,0xB2,0xB2,
0xB2,0x00,0xB3,0xB3,0xB3,0x00,0xB4,0xB4,0xB4,0x00,0xB5,0xB5,0xB5,0x00,0xB6,0xB6,
0xB6,0x00,0xB7,0xB7,0xB7,0x00,0xB8,0xB8,0xB8,0x00,0xB9,0xB9,0xB9,0x00,0xBA,0xBA,
0xBA,0x00,0xBB,0xBB,0xBB,0x00,0xBC,0xBC,0xBC,0x00,0xBD,0xBD,0xBD,0x00,0xBE,0xBE,
0xBE,0x00,0xBF,0xBF,0xBF,0x00,0xC0,0xC0,0xC0,0x00,0xC1,0xC1,0xC1,0x00,0xC2,0xC2,
0xC2,0x00,0xC3,0xC3,0xC3,0x00,0xC4,0xC4,0xC4,0x00,0xC5,0xC5,0xC5,0x00,0xC6,0xC6,
0xC6,0x00,0xC7,0xC7,0xC7,0x00,0xC8,0xC8,0xC8,0x00,0xC9,0xC9,0xC9,0x00,0xCA,0xCA,
0xCA,0x00,0xCB,0xCB,0xCB,0x00,0xCC,0xCC,0xCC,0x00,0xCD,0xCD,0xCD,0x00,0xCE,0xCE,
0xCE,0x00,0xCF,0xCF,0xCF,0x00,0xD0,0xD0,0xD0,0x00,0xD1,0xD1,0xD1,0x00,0xD2,0xD2,
0xD2,0x00,0xD3,0xD3,0xD3,0x00,0xD4,0xD4,0xD4,0x00,0xD5,0xD5,0xD5,0x00,0xD6,0xD6,
0xD6,0x00,0xD7,0xD7,0xD7,0x00,0xD8,0xD8,0xD8,0x00,0xD9,0xD9,0xD9,0x00,0xDA,0xDA,
0xDA,0x00,0xDB,0xDB,0xDB,0x00,0xDC,0xDC,0xDC,0x00,0xDD,0xDD,0xDD,0x00,0xDE,0xDE,
0xDE,0x00,0xDF,0xDF,0xDF,0x00,0xE0,0xE0,0xE0,0x00,0xE1,0xE1,0xE1,0x00,0xE2,0xE2,
0xE2,0x00,0xE3,0xE3,0xE3,0x00,0xE4,0xE4,0xE4,0x00,0xE5,0xE5,0xE5,0x00,0xE6,0xE6,
0xE6,0x00,0xE7,0xE7,0xE7,0x00,0xE8,0xE8,0xE8,0x00,0xE9,0xE9,0xE9,0x00,0xEA,0xEA,
0xEA,0x00,0xEB,0xEB,0xEB,0x00,0xEC,0xEC,0xEC,0x00,0xED,0xED,0xED,0x00,0xEE,0xEE,
0xEE,0x00,0xEF,0xEF,0xEF,0x00,0xF0,0xF0,0xF0,0x00,0xF1,0xF1,0xF1,0x00,0xF2,0xF2,
0xF2,0x00,0xF3,0xF3,0xF3,0x00,0xF4,0xF4,0xF4,0x00,0xF5,0xF5,0xF5,0x00,0xF6,0xF6,
0xF6,0x00,0xF7,0xF7,0xF7,0x00,0xF8,0xF8,0xF8,0x00,0xF9,0xF9,0xF9,0x00,0xFA,0xFA,
0xFA,0x00,0xFB,0xFB,0xFB,0x00,0xFC,0xFC,0xFC,0x00,0xFD,0xFD,0xFD,0x00,0xFE,0xFE,
0xFE,0x00,0xFF,0xFF,0xFF,0x00
};


const byte tiff_data[]={
0x4D,0x4D,             
0x00,0x2A,             
0x00,0x00,0x00,0x08,   
0x00,0x0D,             
//#0(10-21)
0x00,0xFE,
0x00,0x04,
0x00,0x00,0x00,0x01,
0x00,0x00,0x00,0x00,
//#1(22-33)
0x01,0x00,
0x00,0x04,
0x00,0x00,0x00,0x01,
0x00,0x00,0x01,0x40,
//#2(34-45)
0x01,0x01,
0x00,0x04,
0x00,0x00,0x00,0x01,
0x00,0x00,0x01,0x00,
//#3(46-57)
0x01,0x02,
0x00,0x03,
0x00,0x00,0x00,0x01,
0x00,0x08,
0x00,0x00,
//#4(58-69)
0x01,0x03,
0x00,0x03,
0x00,0x00,0x00,0x01,
0x00,0x01,
0x00,0x00,
//#5(70-81)
0x01,0x06,
0x00,0x03,
0x00,0x00,0x00,0x01,
0x00,0x01,
0x00,0x00,
//#6(82-93)
0x01,0x11,
0x00,0x04,
0x00,0x00,0x00,0x01,
0x00,0x00,0x00,0xCF,
//#7(94-105)
0x01,0x16,
0x00,0x04,
0x00,0x00,0x00,0x01,
0x00,0x00,0x01,0x00,
//#8(106-117)
0x01,0x17,
0x00,0x04,
0x00,0x00,0x00,0x01,
0x00,0x01,0x40,0x00,
//#9(118-129)
0x01,0x1A,
0x00,0x05,
0x00,0x00,0x00,0x01,
0x00,0x00,0x00,0x04,
//#10(130-141)
0x01,0x1B,
0x00,0x04,
0x00,0x00,0x00,0x01,
0x00,0x00,0x00,0x04,
//#11(142-153)
0x01,0x28,
0x00,0x03,
0x00,0x00,0x00,0x01,
0x00,0x01,
0x00,0x00,
//#12(154-165)
0x01,0x31,
0x00,0x02,
0x00,0x00,0x00,0x15,
0x00,0x00,0x00,0xBA,
};

//Arquivo da imagem captada
HANDLE hFile;


COpticonCameraDriver::COpticonCameraDriver(void)	
{	
	iImgWidth	  = 800;
	iImgHeight    = 600;
	imgResolution = RESOLUTION_8_BPP;
	imgFileType   = TYPE_JPEG;
}

COpticonCameraDriver::~COpticonCameraDriver(void)
{
}


void COpticonCameraDriver::SetImageSize(int iWidth, int iHeight)
{
	iImgWidth  = iWidth;
	iImgHeight = iHeight;
}

void COpticonCameraDriver::ImagerEnable(void)
{
    DWORD Result=0, Result1=0;
    DeviceIoControl(hFile, BCR_IOCTL_IMAGER_ENABLE, NULL, 0, &Result, sizeof(Result), &Result1, NULL);
    RETAILMSG(1, (TEXT("[BCR] Ena Status :  %x\n"), Result));	
}

void COpticonCameraDriver::ShootPhoto()
{	
	hFile = CreateFile( L"BCR0:",
                GENERIC_READ | GENERIC_WRITE,
                0,    // comm devices must be opened w/exclusive-access
                NULL, // no security attrs
                OPEN_EXISTING, // comm devices must use OPEN_EXISTING
                FILE_ATTRIBUTE_NORMAL,    // overlapped I/O 
                NULL  // hTemplate must be NULL for comm devices  
				);

    if ( hFile == INVALID_HANDLE_VALUE ) 
    {
		//RETAILMSG(1, (TEXT("Create BCR Err 1 \r\n")));
		AfxMessageBox ( _T("Creat BCR Service ERR!"));
    }

	ImagerEnable();
	GetImageData(iImgWidth, iImgHeight, imgResolution, imgFileType);
}


void BuildHeaderBmp( unsigned int output_img_width,
					 unsigned int output_img_height,
					 unsigned int bpp )
{
	unsigned int h_size,f_size;
	byte *dwptr;

	size_1Hb = output_img_width;
	switch ( bpp )
	{
		case 1: //1BPP
				memcpy( &bmp_gray_data_work[0] , &bmp_data1[0] , BMP_HEADER_SIZE1 );
				size_1HB = size_1Hb/8 + (((size_1Hb%8) > 0)?1:0);
				h_size   = BMP_HEADER_SIZE1;
				break;
		case 4: //4BPP
				memcpy( &bmp_gray_data_work[0] , &bmp_data4[0] , BMP_HEADER_SIZE4 );
				size_1HB = size_1Hb/2 + (((size_1Hb%2) > 0)?1:0);
				h_size   = BMP_HEADER_SIZE4;
				break;
		case 8: //8BPP
				memcpy( &bmp_gray_data_work[0] , &bmp_data8[0] , BMP_HEADER_SIZE8 );
				size_1HB = size_1Hb;
				h_size   = BMP_HEADER_SIZE8;
				break;
	}
	if ((size_1HB%4) > 0)
	{
		size_1HB += (4-size_1HB%4);
	}
	cnt_v = output_img_height;

	f_size = h_size + size_1HB*cnt_v;

	// header 
	dwptr = (byte *)&bmp_gray_data_work[2];  *dwptr=f_size&0xFF; //fileSize
	dwptr = (byte *)&bmp_gray_data_work[3];  *dwptr=(f_size>>8)&0xFF; //fileSize
	dwptr = (byte *)&bmp_gray_data_work[4];  *dwptr=(f_size>>16)&0xFF; //fileSize
	dwptr = (byte *)&bmp_gray_data_work[5];  *dwptr=(f_size>>24)&0xFF; //fileSize
    
	dwptr = (byte *)&bmp_gray_data_work[18]; *dwptr=size_1Hb&0xFF; //H
	dwptr = (byte *)&bmp_gray_data_work[19]; *dwptr=(size_1Hb>>8)&0xFF; //H
	dwptr = (byte *)&bmp_gray_data_work[20]; *dwptr=(size_1Hb>>16)&0xFF; //H
	dwptr = (byte *)&bmp_gray_data_work[21]; *dwptr=(size_1Hb>>24)&0xFF; //H
    
	dwptr = (byte *)&bmp_gray_data_work[22]; *dwptr=cnt_v&0xFF; //V
	dwptr = (byte *)&bmp_gray_data_work[23]; *dwptr=(cnt_v>>8)&0xFF; //V
	dwptr = (byte *)&bmp_gray_data_work[24]; *dwptr=(cnt_v>>16)&0xFF; //V
	dwptr = (byte *)&bmp_gray_data_work[25]; *dwptr=(cnt_v>>24)&0xFF; //V
}



void BuildHeaderTiff( unsigned int output_img_width,
					  unsigned int output_img_height,
					  unsigned int res,
					  unsigned int bpp )
{
	//unsigned int size_1Hb,size_1HB,size_1H,cnt_v;
	//unsigned int f_size;
	unsigned int b_cnt;
	byte *dwptr;

	memcpy( &tiff_gray_data_work[0] , &tiff_data[0] , TIFF_HEADER_SIZE );
	size_1Hb = output_img_width;

	switch ( bpp )
	{
		case 1: //1BPP
				size_1HB = size_1Hb/8 + (((size_1Hb%8) > 0)?1:0);
				break;
		case 4: //4BPP
				size_1HB = size_1Hb/2 + (((size_1Hb%2) > 0)?1:0);
				break;
		case 8: //8BPP
				size_1HB = size_1Hb;
				break;
	}
	if ((size_1HB%4) > 0)
	{
		size_1HB += (4-size_1HB%4);
	}
	cnt_v = output_img_height;

	//f_size = TIFF_HEADER_SIZE+size_1H*cnt_v;
	b_cnt = size_1HB*cnt_v;
    
	//TIFF Header
	dwptr = (byte *)&tiff_gray_data_work[30]; *dwptr=(size_1Hb>>24)&0xFF; //H
	dwptr = (byte *)&tiff_gray_data_work[31]; *dwptr=(size_1Hb>>16)&0xFF; //H
	dwptr = (byte *)&tiff_gray_data_work[32]; *dwptr=(size_1Hb>>8)&0xFF; //H
	dwptr = (byte *)&tiff_gray_data_work[33]; *dwptr=size_1Hb&0xFF; //H

	dwptr = (byte *)&tiff_gray_data_work[42]; *dwptr=(cnt_v>>24)&0xFF; //V
	dwptr = (byte *)&tiff_gray_data_work[43]; *dwptr=(cnt_v>>16)&0xFF; //V
	dwptr = (byte *)&tiff_gray_data_work[44]; *dwptr=(cnt_v>>8)&0xFF; //V
	dwptr = (byte *)&tiff_gray_data_work[45]; *dwptr=cnt_v&0xFF; //V

	dwptr = (byte *)&tiff_gray_data_work[54]; *dwptr=(bpp>>8)&0xFF; //cbit
	dwptr = (byte *)&tiff_gray_data_work[55]; *dwptr=bpp&0xFF; //cbit

	dwptr = (byte *)&tiff_gray_data_work[102];  *dwptr=(size_1Hb>>24)&0xFF; //RowsPerStrip
	dwptr = (byte *)&tiff_gray_data_work[103];  *dwptr=(size_1Hb>>16)&0xFF; //RowsPerStrip
	dwptr = (byte *)&tiff_gray_data_work[104];  *dwptr=(size_1Hb>>8)&0xFF; //RowsPerStrip
	dwptr = (byte *)&tiff_gray_data_work[105];  *dwptr=size_1Hb&0xFF; //RowsPerStrip

	dwptr = (byte *)&tiff_gray_data_work[114];  *dwptr=(/*f_size*/b_cnt>>24)&0xFF; //fileSize StripByteCount
	dwptr = (byte *)&tiff_gray_data_work[115];  *dwptr=(/*f_size*/b_cnt>>16)&0xFF; //fileSize StripByteCount
	dwptr = (byte *)&tiff_gray_data_work[116];  *dwptr=(/*f_size*/b_cnt>>8)&0xFF; //fileSize StripByteCount
	dwptr = (byte *)&tiff_gray_data_work[117];  *dwptr=/*f_size*/b_cnt&0xFF; //fileSize StripByteCount


}

BOOL Write_to_Opening_File( HANDLE *phFile, unsigned char * pcRdBuf, DWORD dwReadCount)
{
    if( !phFile || !pcRdBuf || (dwReadCount==0) )
        return FALSE;
    DWORD dwBytes = 0;
    BOOL bResult = WriteFile( *phFile, pcRdBuf, dwReadCount, &dwBytes, NULL);
    if( bResult == FALSE || dwReadCount != dwBytes )
    {
        RETAILMSG( 1, (_T("[BCR] WriteFile ERR\r\n")) );
        return FALSE;
    }
    
    bResult = SetEndOfFile( *phFile );
    if( bResult == FALSE )
    {
        RETAILMSG( 1, (_T("[BCR] SetEndOfFile ERR\r\n")) );
        return FALSE;
    }
    return TRUE;
}

BOOL BCR_Save_Image_File(sBCR_ImageInfo * pImgInfo, unsigned char * pucBuff, DWORD dwTotalLen, CString sPhotoFileName)
{
	HANDLE hFile = INVALID_HANDLE_VALUE;
	byte * bptr;
		
    hFile = CreateFile( sPhotoFileName, 
                        GENERIC_WRITE, 
                        0, 
                        NULL, 
                        CREATE_ALWAYS, 
                        0, 
                        NULL
                       );

    if( hFile == INVALID_HANDLE_VALUE)
        return FALSE;
	if( pImgInfo->dwFileFormat == 1)// JPEG Format
	{
		//Write_to_Opening_File( &hFile, pucBuff, dwTotalLen);
		DWORD dwBytes;
		BOOL bResult = WriteFile( hFile, pucBuff, dwTotalLen, &dwBytes, NULL);
		RETAILMSG(1, (TEXT("[BCR] Save JPEG Image :[%x] %x, %x\n"), bResult, dwTotalLen, dwBytes));
	}
	else if( pImgInfo->dwFileFormat == 3)// BMP Format
	{
		
		DWORD dwImgW = pImgInfo->dwRight - pImgInfo->dwLeft;
		DWORD dwImgH = pImgInfo->dwBottom - pImgInfo->dwTop;
		int idxH;
		BuildHeaderBmp( dwImgW,
						dwImgH,
						pImgInfo->dwBitPerPiexl );
		switch ( pImgInfo->dwBitPerPiexl )
		{
			case 1: 
				Write_to_Opening_File( &hFile, &bmp_gray_data_work[0], BMP_HEADER_SIZE1);
				break;
			case 4: 
				Write_to_Opening_File( &hFile, &bmp_gray_data_work[0], BMP_HEADER_SIZE4);
				break;
			case 8: 
				Write_to_Opening_File( &hFile, &bmp_gray_data_work[0], BMP_HEADER_SIZE8);
				break;
		}

		last_v = dwImgH-1;
		for (idxH=last_v; 0<=idxH; --idxH)
		{
			bptr = pucBuff + (idxH*MAX_LINE_SIZE);
			Write_to_Opening_File( &hFile, bptr, size_1HB);
		}

	}
	else if( pImgInfo->dwFileFormat == 4)// TIFF Format
	{
		DWORD dwImgW = pImgInfo->dwRight - pImgInfo->dwLeft;
		DWORD dwImgH = pImgInfo->dwBottom - pImgInfo->dwTop;
		int tif_w;
		int idxH;
		BuildHeaderTiff( dwImgW,
						 dwImgH,
						 pImgInfo->dwResolution,
						 pImgInfo->dwBitPerPiexl );
		Write_to_Opening_File( &hFile, &tiff_gray_data_work[0], TIFF_HEADER_SIZE);
		switch (pImgInfo->dwBitPerPiexl)
		{
			case 1:
				tif_w = dwImgW/8;
				tif_w += (((dwImgW%8) > 0)?1:0);
				break;
			case 4:
				tif_w = dwImgW/2;
				tif_w += (((dwImgW%2) > 0)?1:0);
				break;
			case 8:
				tif_w = dwImgW;
				break;
		}
		last_v = dwImgH;
		for (idxH=0; idxH<last_v; ++idxH)
		{
			bptr = pucBuff + (idxH*MAX_LINE_SIZE);
			Write_to_Opening_File( &hFile, bptr, tif_w);
		}
	}

	BOOL bRet = CloseHandle( hFile );
	if( bRet == 0)
	{
	    RETAILMSG(1, (TEXT("[BCR] File Close %x \n"), GetLastError()));
	}
	return TRUE;
}





void COpticonCameraDriver::GetImageData(int iW, int iH, int iBPP, int iType)
{
    DWORD Result1=0;
    sBCR_GetImgCaptureDataIn ParamIn;
	sBCR_ImageInfo ImgInfo;
	DWORD ImageLeng = 0;
	DWORD DecodeLeng = 0;
    RETAILMSG(1, (TEXT("[BCR] GetImageData\n")));
 	RETAILMSG(1, (TEXT("[BCR] W : %d, H : %d, BPP : %d , File : %d \n"),iW, iH, iBPP, iType));
	ParamIn.dwLeft = 300;//312;
    ParamIn.dwTop = 300;//440;
    ParamIn.dwRight = 300+iW;//712;
    ParamIn.dwBottom = 300+iH;//840;
    ParamIn.dwResolution = 1;
    ParamIn.dwBitPerPiexl = iBPP;
    ParamIn.dwRotation = 0;
    ParamIn.dwJPEGquality = 60;
    ParamIn.dwSnapShot = 1;
    ParamIn.dwFileFormat = iType;
    
	if( 300+iW >= 1280 ||
		300+iH >= 1024 ||
		(iBPP != 1	&&
		iBPP != 4	&&
		iBPP != 8)	||
		(iType != 1	&&
		iType != 3	&&
		iType != 4))
	{
		RETAILMSG(1, (TEXT("Wrong Parameter : W : 0-11290, H : 0-1024, BPP : 1:4:8, Type : 1:3:4 \n")));
		return;
	}
    sBCR_GetImgCaptureDataOut ParamOut;
    ParamOut.pImgInfo = &ImgInfo;
    ParamOut.pImgData = ImgBuffer;//NULL;//ImgBuffer;
	ImageLeng = (MAX_IMG_HEIGHT+12) * (MAX_LINE_SIZE+1); //0;//(MAX_IMG_HEIGHT+12) * (MAX_LINE_SIZE+1);
    ParamOut.pdwImgDataLength = &ImageLeng;
    ParamOut.pDecodeData = NULL;
    ParamOut.pdwDecodeDataLength = &DecodeLeng;
    DeviceIoControl(hFile, BCR_IOCTL_GET_IMAGEDATA, &ParamIn, sizeof(sBCR_GetImgCaptureDataIn), &ParamOut, sizeof(ParamOut), &Result1, NULL);

    RETAILMSG(1, (TEXT("[BCR] GetImageData State \n")));

	RETAILMSG(1, (TEXT(" L : %x, T : %x, R : %x, B : %x, Re : %x \n"), ParamOut.pImgInfo->dwLeft
																	 , ParamOut.pImgInfo->dwTop
																	 , ParamOut.pImgInfo->dwRight
																	 , ParamOut.pImgInfo->dwBottom
																	 , ParamOut.pImgInfo->dwResolution));
	
	RETAILMSG(1, (TEXT(" GetImageData State Return pdwImgDataLength %x\n"), *ParamOut.pdwImgDataLength));
	RETAILMSG(1, (TEXT(" GetImageData State Return pImgData %x \n"), ParamOut.pImgData));
	
	/*if( ParamOut.pImgData != NULL && 
		*ParamOut.pdwImgDataLength != 0 )
	{
		DWORD dwBytes=0;
		HANDLE hFile = CreateFile( _T("\\My Documents\\__tempOptPhoto.jpeg"), 
                        GENERIC_WRITE, 
                        0, 
                        NULL, 
                        CREATE_ALWAYS, 
                        0, 
                        NULL
                       );
		BOOL bResult = WriteFile( hFile, ParamOut.pImgData, ImageLeng, &dwBytes, NULL);
		RETAILMSG(1, (TEXT(" [%x]\n"), *ParamOut.pdwImgDataLength));
		CloseHandle( hFile );
	
	}*/


	BYTE *pImgDataBuf;
	pImgDataBuf = new BYTE[(MAX_IMG_HEIGHT+2) * (MAX_LINE_SIZE+2+1)];
	memset(pImgDataBuf,1,sizeof(pImgDataBuf));
	if( ParamOut.pImgData != NULL && 
		*ParamOut.pdwImgDataLength != 0 )
	{		
			pImgDataBuf = ParamOut.pImgData;	
			BCR_Save_Image_File( &ImgInfo, &(pImgDataBuf[0]), *ParamOut.pdwImgDataLength, sPhotoFileName);				
	}
	
}

#endif